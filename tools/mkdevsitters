#!/bin/bash

#
# mkdevsitters: creates ZFS datasets and configuration files each of three
# manatee sitters.  See ./mksitterconfig.
#

mds_arg0="$(basename ${BASH_SOURCE[0]})"
mds_zonename="$(zonename)"
mds_basedir="$(dirname ${BASH_SOURCE[0]})/.."
mds_mksitterconfig="$mds_basedir/tools/mksitterconfig"
declare -A mds_pgsupported
mds_pgsupported=(
    ["9.2"]="73c122"
    ["9.6"]="ca9cfe"
)
mds_pgbuilddir="/tmp/mds_pgbuild"
mds_ip="$1"
mds_zkconnstr="$2"
mds_shard="$3"
mds_pgversion="$4"

function fail
{
	echo "$mds_arg0: $@" >&2
	exit 1
}

function mksitter
{
	local which ip zkconnstr
	local dataset mountpoint
	local port sitterdir script

	which="$1"
	ip="$2"
	zkconnstr="$3"
	shard="$4"
	pgversion="$5"
	dataset="zones/$mds_zonename/data/peer$which"
	sitterdir="$PWD/devconfs/sitter$which"
	mountpoint="$PWD/devconfs/datasets/manatee$which"

	echo -n "peer $which: creating dataset mountpoint ..."
	if ! mkdir -p $mountpoint ||
	   ! chown postgres $mountpoint ||
	   ! chmod 700 $mountpoint; then
		fail "failed to create, chown, or chmod \"$mountpoint\""
	fi

	echo "done."

	#
	# We need to create three configuration files for each peer:
	#
	#    o the template postgres configuration file
	#    o the manatee-sitter configuration file.
	#    o the backup server configuration file
	#
	mkdir -p $sitterdir
	mkdir -p $sitterdir/9.2
	mkdir -p $sitterdir/9.6
	mkdir -p $sitterdir/log
	chown postgres:postgres $sitterdir/log || \
	    fail "failed to chown postgres log directory"

	echo -n "peer $which: creating configuration ... "
	$mds_mksitterconfig "$PWD/devconfs" "$ip" "$zkconnstr" "$which" \
	    "$shard" "$pgversion" > "$sitterdir/sitter.json" || \
	    fail "failed to generate sitter config"
	echo "{}" > "$sitterdir/pg_overrides.json" || \
	    fail "failed to write pg_overrides.json"
	echo "done."

	echo -n "peer $which: fetching port from generated config ... "
	port="$(json postgresPort < "$sitterdir/sitter.json")"
	[[ -n "$port" ]] || fail "no postgres port found in generated config"
	echo "$port."

	echo -n "peer $which: creating template postgresql.conf ... "
	egrep -v '^\s*port\s*=' "$mds_basedir/etc/postgresql.conf" |
	    egrep -v '^\s*log_directory\s*=' > \
	    "$sitterdir/$pgversion/postgresql.conf"
	echo "port = $port # (change requires restart)" >> \
	    "$sitterdir/$pgversion/postgresql.conf"
	echo "log_directory = '$sitterdir/log'" >> \
	    "$sitterdir/$pgversion/postgresql.conf"
	for conf in recovery pg_hba; do
		cp "$mds_basedir/etc/$conf.conf" "$sitterdir/$pgversion/."
	done
	echo "done."

	echo -n "peer $which: creating backupserver config ... "
	port="$(json backupServerCfg.port < etc/backupserver.json)"
	[[ -n "$port" ]] || fail "failed to get default backupserver port"
	port=$(( port + 10 * (which - 1) ))
	script="this.backupSenderCfg = {};"
	script="$script this.backupSenderCfg.dataset = '$dataset';"
	script="$script this.backupSenderCfg.zfsPath = '/usr/sbin/zfs';"
	script="$script this.backupServerCfg = {};"
	script="$script this.backupServerCfg.port = $port;"
	echo "{}" | json -e "$script" > "$sitterdir/backupserver.json"
	echo "done."

	echo -n "peer $which: creating snapshotter config ... "
	script="this.dataset = '$dataset';"
	script="$script this.pollInterval = 36000;"
	script="$script this.snapshotNumber = 20;"
	echo "{}" | json -e "$script" > "$sitterdir/snapshotter.json"
	echo "done."
}

# a fair amount of this function is making naive assumptions, but for
# development purposes it's likely enough
function ensurepostgres {
	local vshort pgdir

	if ! json -f package.json > /dev/null 2>&1; then
		fail "must be in manatee project directory"
	fi

	if ! ls .git > /dev/null 2>&1; then
		fail "pwd doesn't appear to be a git repository"
	fi

	groupadd -g 907 postgres > /dev/null 2>&1
	useradd -u 907 -g postgres postgres > /dev/null 2>&1

	if ! grep ^postgres /opt/local/etc/sudoers > /dev/null 2>&1; then
	echo "postgres    ALL=(ALL) NOPASSWD: /usr/bin/chown, /usr/bin/chmod," \
	    "/opt/local/bin/chown, /opt/local/bin/chmod" \
	    >> /opt/local/etc/sudoers
	fi

	echo "ensuring supported postgres versions are installed"
	git submodule add https://github.com/reorg/pg_repack.git deps/pg_repack
	for version in ${!mds_pgsupported[@]}; do
		vshort=$(echo "$version" | sed 's/\.//')
		pgdir="$mds_pgbuilddir/root/opt/postgresql/"

		git submodule add https://github.com/postgres/postgres.git \
		    "deps/postgresql$vshort"
		cd "deps/postgresql$vshort"
		git checkout "${mds_pgsupported[$version]}"
		cd - > /dev/null 2>&1

		if ! ls "$pgdir/$version"*"/bin/postgres" > /dev/null 2>&1; then
			echo "building postgres $version" \
			    "(log at $mds_pgbuilddir/build.log)"
			mkdir -p "$mds_pgbuilddir"
			make -f Makefile.postgres \
			    RELSTAGEDIR="$mds_pgbuilddir" \
			    DEPSDIR="$PWD/deps" "pg$vshort" \
			    >> "$mds_pgbuilddir/build.log" 2>&1
		fi
	done
	cp -R "$mds_pgbuilddir/root/opt/postgresql" /opt/.
}

if ! type zonename > /dev/null 2>&1; then
	fail "cannot determine dataset root: zonename(1M) command not found"
fi

if [[ $# -lt 3 ]]; then
	echo "usage: $mds_arg0 LOCAL_IP ZK_IP:ZK_PORT SHARD PG_VERSION" >&2
	exit 2
fi

if [[ -z "$mds_pgversion" ]]; then
	mds_pgversion="9.6"
fi

if [[ ! "${!mds_pgsupported[@]}" =~ "$mds_pgversion" ]]; then
	fail "supported version are \"9.2\" or \"9.6\""
fi

ensurepostgres

for (( i = 1; i <= 3; i++ )) {
	mksitter $i "$mds_ip" "$mds_zkconnstr" "$mds_shard" "$mds_pgversion"
}
