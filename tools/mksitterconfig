#!/usr/bin/env node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

/*
 * mksitterconfig ROOT SELF_IP ZK_CONNECTION_STRING WHICH: generate a
 * manatee-sitter configuration for a development host.
 */

var child_process = require('child_process');
var net = require('net');
var path = require('path');
var util = require('util');

var arg0 = path.basename(process.argv[1]);

/* default config: nulls will be filled-in dynamically */
var configTemplate = {
    'backupPort': 10002,
    'ip': null,
    'postgresMgrCfg': {
        'dataConfig': null,
        'postgresConfDir': null,
        'defaultVersion': null,
        'pgBaseDir': '/opt/postgresql/',
        'postgresConfFile': 'postgresql.conf',
        'recoveryConfFile': 'recovery.conf',
        'hbaConfFile': 'pg_hba.conf',
        'versions': {
            '9.2': '9.2.4',
            '9.6': '9.6.3'
        },
        'dataDir': null,
        'dbUser': 'postgres',
        'hbaConf': './etc/pg_hba.conf',
        'healthChkInterval': 1000,
        'healthChkTimeout': 5000,
        'oneNodeWriteMode': false,
        'opsTimeout': 60000,
        'pgConnectTimeout': 60,
        'pgInitDbPath': '/opt/local/bin/initdb',
        'postgresConf': null,
        'postgresPath': '/opt/local/bin/postgres',
        'recoveryConf': './etc/recovery.conf',
        'replicationTimeout': 60000,
        'snapShotterCfg': {
            'dataset': null
        },
        'syncStateCheckerCfg': {
            'cookieLocation': null,
            'interval': 1000
        },
        'url': null,
        'zfsClientCfg': {
            'dataset': null,
            'mountpoint': null,
            'pollInterval': 1000,
            'zfsHost': null,
            'zfsPath': '/usr/sbin/zfs',
            'zfsPort': 10001
        }
    },
    'postgresPort': 5432,
    'shardPath': null,
    'ttl': 60,
    'zkCfg': {
        'connStr': null,
        'opts': {
            'sessionTimeout': 60000
        }
    },
    'zoneId': null
};

function usage(message)
{
    if (message)
        console.error('%s: %s', arg0, message);
    console.error('usage: %s SELF_IP ZK_IP:ZK_PORT[...] WHICH SHARD ' +
        'PG_VERSION', arg0);
    process.exit(2);
}

function fatal(message)
{
    console.error('%s: %s', arg0, message);
    process.exit(1);
}

function main()
{
    var root, ip, shardpath, zkconnstr, which, shardname, pgversion;

    if (process.argv.length < 7)
        usage();

    root = process.argv[2];

    /*
     * The IP comes in as an argument because many development hosts have
     * several IP addresses but only one of them is suitable for our purposes.
     */
    ip = process.argv[3];
    if (!net.isIPv4(ip))
        usage('peer IP does not appear valid');

    /*
     * This check isn't precise, but it will catch very obviously wrong input.
     */
    zkconnstr = process.argv[4];
    if (!/(^\d{0,3}\.\d{0,3}\.\d{0,3}\.\d{0,3}:\d{1,5},?)+/.test(zkconnstr))
        usage('zk connection string does not appear valid');

    which = parseInt(process.argv[5], 10);
    if (isNaN(which) || which <= 0)
        usage('WHICH argument should be a positive integer');

    shardname = process.argv[6];
    if (typeof (shardname) !== 'string')
        usage('SHARD does not apear to be a string');

    /*
     * Basic checks on whether we have a full shard path starting at the root,
     * or a shard name that we'll append to the "/manatee" path.
     */
    if (shardname.substr('/', 1) == '/') {
        shardpath = shardname;
    } else {
        shardpath = '/manatee/' + shardname;
    }

    pgversion = process.argv[7];
    if ([ '9.2', '9.6' ].indexOf(pgversion) === -1)
        usage('PG_VERSION should be either "9.2" or "9.6"');

    child_process.exec('zonename', function (err, stdout, stderr) {
        var config, reason;

        if (err) {
            reason = err.code ? ('exited with status ' + err.code) :
                ('killed by signal ' + err.signal);
            fatal('failed to determine zonename: child process ' + reason);
        }

        config = mkconfig(configTemplate, {
            'root': root,
            'ip': ip,
            'zkconnstr': zkconnstr,
            'zonename': stdout.trim(),
            'which': which,
            'shardpath': shardpath,
            'pgversion': pgversion
        });

        console.log(JSON.stringify(config, false, '\t'));
    });
}

function mkconfig(template, params)
{
    var rv, key, which, portdelta;
    var dataset, mountpoint, datadir, cookie, pgurl, pgconf, pgconfdir,
        dataconfig;

    /* XXX should be a deep copy */
    rv = {};
    for (key in template)
        rv[key] = template[key];

    /*
     * Update the fields that depend on which of N peers' configs we're writing
     * out.
     */
    which = params.which;
    portdelta = (which - 1) * 10;

    rv.backupPort += portdelta;
    rv.postgresMgrCfg.zfsClientCfg.zfsPort += portdelta;
    rv.postgresPort += portdelta;

    /*
     * Construct the dynamic fields.
     */
    dataset = util.format('zones/%s/data/peer%s', params.zonename, which);
    pgurl = util.format('tcp://%s@%s:%s/postgres',
        rv.postgresMgrCfg.dbUser, params.ip, rv.postgresPort);
    mountpoint = util.format('%s/datasets/manatee%s', params.root, which);
    datadir = util.format('%s/data', mountpoint);
    cookie = util.format('/var/tmp/manatee%s_sync_cookie', which);
    pgconf = util.format('%s/sitter%s/postgres.conf', params.root, which);
    pgconfdir = util.format('%s/sitter%s', params.root, which);
    dataconfig = util.format('%s/manatee-config.json', mountpoint);

    /*
     * Construct the final configuration and return it.
     */
    rv.ip = params.ip;

    rv.postgresMgrCfg.postgresConfDir = pgconfdir;
    rv.postgresMgrCfg.dataConfig = dataconfig;
    rv.postgresMgrCfg.dataDir = datadir;
    rv.postgresMgrCfg.postgresConf = pgconf;
    rv.postgresMgrCfg.syncStateCheckerCfg.cookieLocation = cookie;
    rv.postgresMgrCfg.snapShotterCfg.dataset = dataset;
    rv.postgresMgrCfg.url = pgurl;
    rv.postgresMgrCfg.zfsClientCfg.dataset = dataset;
    rv.postgresMgrCfg.zfsClientCfg.mountpoint = mountpoint;
    rv.postgresMgrCfg.zfsClientCfg.zfsHost = params.ip;
    rv.postgresMgrCfg.defaultVersion = params.pgversion;
    rv.zkCfg.connStr = params.zkconnstr;
    rv.shardPath = params.shardpath;
    rv.zoneId = util.format('peer%d-%s', params.which, params.zonename);
    return (rv);
}

main();
